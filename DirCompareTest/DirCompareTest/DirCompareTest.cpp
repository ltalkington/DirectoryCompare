#include <iostream>
#include <cassert>
#include <fstream>
#include <iostream>
#include <filesystem>
#include <string>
using namespace std;
#include "../../DirCompare/DirCompare/DirCompare.cpp"
#define UNIT_TEST

#ifdef UNIT_TEST

void createFileInDirectory(string& file, string output)
{
    ofstream outfile(file);
    if (!outfile) {
        cerr << "Error creating file" << file << endl;
    }

    outfile << "hello, this is autogenerated\n.";
    outfile << output << endl;
    outfile.close();
}
void createDirectory(string& dir)
{
    if (!filesystem::exists(dir))
    {
        if (!filesystem::create_directory(dir))
        {
            cerr << "Couldn't make the directory" << endl;
        }
        else
        {
            cout << "Generated the directory " << dir << endl;
        }
    }
}

void generateSameFiles()
{
    cout << "Generating same test files" << endl;
    string directory1 = "c:/dirA";
    string directory2 = "c:/dirB";
    createDirectory(directory1);
    createDirectory(directory2);

    string file1 = directory1 + "/random.txt";
    string file2 = directory2 + "/random.txt";
    createFileInDirectory(file1, "I am the same file");
    createFileInDirectory(file2, "I am the same file");
}

void generateManySameFiles()
{
    cout << "Generating same test files" << endl;
    string directory1 = "c:/dirA";
    string directory2 = "c:/dirB";
    createDirectory(directory1);
    createDirectory(directory2);
    int i = 0;
    string file1;
    string file2;
    while (i < 10000)
    {
        file1 = directory1 + "/random" + to_string(i) + ".txt";
        file2 = directory2 + "/random" + to_string(i) + ".txt";
        createFileInDirectory(file1, "I am the same file");
        createFileInDirectory(file2, "I am the same file");
        i++;
    }
}

void generateManyDifferentFiles()
{
    cout << "Generating different test files" << endl;
    string directory1 = "c:/dirA";
    string directory2 = "c:/dirB";
    createDirectory(directory1);
    createDirectory(directory2);
    int i = 0;
    string file1;
    string file2;
    while (i < 100)
    {
        file1 = directory1 + "/unique" + to_string(i) + ".txt";
        file2 = directory2 + "/unique" + to_string(i) + ".txt";
        createFileInDirectory(file1, "I am the same file");
        createFileInDirectory(file2, "I am the not same file");
        i++;
    }
}
void generateDifferentFiles()
{
    cout << "Generating different test files" << endl;
    string directory1 = "c:/dirA";
    string directory2 = "c:/dirB";
    createDirectory(directory1);
    createDirectory(directory2);

    string file1 = directory1 + "/diff.txt";
    string file2 = directory2 + "/diff2.txt";
    createFileInDirectory(file1, "I am the same file");
    createFileInDirectory(file2, "I am not the same file");
}

void testCompareSameFiles()
{
    filesystem::path dirPath1 = "c:/dirA/random.txt";
    filesystem::path dirPath2 = "c:/dirB/random.txt";

    assert(compareFiles(dirPath1, dirPath2) == true);
}

void testCompareDifferentFiles()
{
    filesystem::path dirPath1 = "c:/dirA/diff.txt";
    filesystem::path dirPath2 = "c:/dirB/diff2.txt";

    assert(compareFiles(dirPath1, dirPath2) == false);
}

void testFileParsingThroughput(filesystem::path& dirPath1, filesystem::path& dirPath2, unordered_map<string, filesystem::path>& files1, 
    unordered_map<string, filesystem::path>& files2, vector<string>& sameFiles, vector<string>& dirAOnly, vector<string>& dirBOnly)
{
    cout << "Starting to parse the directories" << endl;
    listFiles(dirPath1, files1);
    listFiles(dirPath2, files2);
    cout << "Now Generating the file lists" << endl;
    generateFileLists(sameFiles, dirAOnly, dirBOnly, files1, files2);
}

int main()
{
    // Testing that the same file is the same
    generateSameFiles();
    testCompareSameFiles();

    // Testing that different files are different
    generateDifferentFiles();
    testCompareDifferentFiles();
    
    // Testing that 10k files can be generated and parsed
    cout << "Generating 10,000 files and seeing if they can be parsed" << endl;
    generateManySameFiles();
    generateManyDifferentFiles();
    filesystem::path dirPath1 = "c:/DirA";
    filesystem::path dirPath2 = "c:/DirB";
    unordered_map<string, filesystem::path> files1;
    unordered_map<string, filesystem::path> files2;

    vector<string> sameFiles;
    vector<string> dirAOnly;
    vector<string> dirBOnly;
    cout << "Parsing files and seeing if they can be parsed" << endl;
    testFileParsingThroughput(dirPath1, dirPath2, files1, files2, sameFiles, dirAOnly, dirBOnly);
    generateFile("common.txt", sameFiles);
    generateFile("a_only.txt", dirAOnly);
    generateFile("b_only.txt", dirBOnly);
    std::cout << "All tests passed!" << std::endl;
    return 0;
}
#endif